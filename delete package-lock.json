Yes, it can and will affect all the project in really bad way.

if your team does not run npm install after each git pull you all are using different dependencies' versions. So it ends with "but it works for me!!" and "I don't understand why my code does not work for you"

even if all the team runs npm install it still does not mean everything is ok. at some moment you may find your project acts differently. in a part that you have not been changing for years. and after (probably, quite painful) debugging you will find it's because of 3rd level dependency has updated for next major version and this led some breaking changes.

Conclusion: don't ever delete package-lock.json. in your case you better do next way:

Approach 1

revert your changes in package-lock.json
stash your changes
pull most recent code version
run npm install for all the dependencies you need to be added
unstash your changes.
Approach 2

run merging
for conflict resolution choose "their changes only" strategy on package-lock.json
run npm install so dependencies you want to add are also included into package-lock.json
finish with committing merge commit.
PS yes, for first level dependencies if we specify them without ranges (like "react": "16.12.0") we get the same versions each time we run npm install. But we cannot say the same about dependencies of 2+ level deep (dependencies that our dependencies are relying on), so package-lock.json is really important for stability.

Share Improve this answer Follow
answered
Jan 10 '19 at 11:03

skyboyer
14.8k●33 gold badges●3939 silver badges●5555 bronze badges edited
Feb 19 '20 at 10:55

Gabriel Rodrigues
510●88 silver badges●2727 bronze badges
With the Approach 2, I've noticed it easily leads to problems where I end up to the Approach 1 anyway, so I would recommend to go with Approach 1 in the first place. – toni_lehtimaki Oct 28 '19 at 10:18
1
@toni_lehtimaki why if it's basically the same thing? If you opt in the first to rebase on the current package-lock.json or accept "their" package-lock.json on the merge, they're actually the same. Or am I missing something here? – Guilherme Matuella Oct 30 '19 at 21:17 
if I use absolute versions, I mean without ^ or ~, is package-lock.json required? – JRichardsz Sep 3 '20 at 4:09
1
@JRichardsz, you still don't explicitly control transitive(indirect, 2nd+ level) dependencies – skyboyer Sep 3 '20 at 5:32
Add a comment
Up vote
11
Down vote
I know it's an old question but for future seekers, you can also use npm-merge-driver which try to automatically resolve the npm related files' merge issues.

Just install it globally npx npm-merge-driver install --global. You can read more about it here npm-merge-driver

Edit: Just want to warn people, who are interested in using above package, that sometime it can behave erratically and difficult to remove. So although it is a useful tool, it still need some work.

Share Improve this answer Follow
answered
Sep 25 '19 at 12:19

Taha
324●22 silver badges●1010 bronze badges edited
Apr 17 '20 at 13:38

Your Answer

Body
 Add picture
 

OR
Name
Email
 
By clicking “Post Your Answer”, you agree to our terms of service, privacy policy and cookie policy

meta chat tour help blog privacy policy legal contact us cookie settings full site
2021 Stack Exchange, Inc. user contributions under cc by-sa

Your privacy

By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance 
